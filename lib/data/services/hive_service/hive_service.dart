import 'dart:async';
import 'dart:collection';
import 'dart:convert';
import 'dart:io';

import 'package:app_chat365_pc/common/blocs/downloader/model/downloader_model.dart';
import 'package:app_chat365_pc/common/blocs/settings_cubit/cubit/settings_state.dart';
import 'package:app_chat365_pc/common/blocs/user_info_bloc/bloc/user_info_bloc.dart';
import 'package:app_chat365_pc/common/blocs/user_info_bloc/repo/user_info_repo.dart';
import 'package:app_chat365_pc/common/models/api_message_model.dart';
import 'package:app_chat365_pc/common/models/auto_delete_message_time_model.dart';
import 'package:app_chat365_pc/common/models/chat_member_model.dart';
import 'package:app_chat365_pc/common/models/conversation_basic_info.dart';
import 'package:app_chat365_pc/common/models/message_setting_model.dart';
import 'package:app_chat365_pc/common/models/message_setting_model_item.dart';
import 'package:app_chat365_pc/common/models/result_chat_conversation.dart';
import 'package:app_chat365_pc/common/models/result_login.dart';
import 'package:app_chat365_pc/common/repos/chat_repo.dart';
import 'package:app_chat365_pc/data/services/hive_service/hive_box_names.dart';
import 'package:app_chat365_pc/data/services/hive_service/hive_type_id.dart';
import 'package:app_chat365_pc/modules/chat/model/result_socket_chat.dart';
import 'package:app_chat365_pc/utils/data/enums/download_status.dart';
import 'package:app_chat365_pc/utils/data/enums/emoji.dart';
import 'package:app_chat365_pc/utils/data/enums/friend_status.dart';
import 'package:app_chat365_pc/utils/data/enums/message_setting_type.dart';
import 'package:app_chat365_pc/utils/data/enums/message_status.dart';
import 'package:app_chat365_pc/utils/data/enums/message_text_size.dart';
import 'package:app_chat365_pc/utils/data/enums/message_type.dart';
import 'package:app_chat365_pc/utils/data/enums/themes.dart';
import 'package:app_chat365_pc/utils/data/enums/user_status.dart';
import 'package:app_chat365_pc/utils/helpers/logger.dart';
import 'package:app_chat365_pc/utils/helpers/system_utils.dart';
import 'package:app_chat365_pc/zalo/models/conversation_item_model.dart';
import 'package:app_chat365_pc/zalo/models/friend_zalo_model.dart';
import 'package:app_chat365_pc/zalo/models/user_model_zalo.dart';
import 'package:flutter/foundation.dart';
import 'package:hive/hive.dart';
import 'package:hive_flutter/adapters.dart';
import 'package:path_provider/path_provider.dart';

/// TL 22/2/2024: Th·ª© t·ª± kh·ªüi t·∫°o B·∫ÆT BU·ªòC ph·∫£i sau AuthRepo().
/// N·∫øu kh√¥ng, kh√¥ng bi·∫øt ph·∫£i m·ªü danh s√°ch CTC c·ªßa ng∆∞·ªùi n√†o
class HiveService {
  static HiveService? _instance;

  factory HiveService() => _instance ??= HiveService._();

  HiveService._();

  init() async {
    // throw Exception('Message Error');
     if (Platform.isWindows) {
      String? path = (await getApplicationSupportDirectory()).path;
      logger.log("AppData: $path");
      await Hive.initFlutter(path);
    } else {
      await Hive.initFlutter();
    }
    try {
      // TL 28/12/2023: CH·ªà D√ôNG DELETE ƒê·ªÇ DEBUG!
      // Khi m√† vi·ªác l∆∞u local ·ªïn ƒë·ªãnh r·ªìi, mu·ªën cho v√†o b·∫£n release,
      // th√¨ comment c√°i n√†y ƒëi ƒë·ªÉ l∆∞u tr·ªØ nhi·ªÅu h∆°n, g·ªçi API √≠t h∆°n

      registerAdapter();
      await _openBoxes();
    } catch (e, s) {
      logger.logError(e, s, 'RegisterAdapterError');
    }
  }

  /// TL 28/12/2023
  /// D√πng ƒë·ªÉ x√≥a s·∫°ch Hive m·ªói khi m√¨nh l√†m tr√≤ g√¨ ƒë√≥ ph√° ph√°ch
  /// khi·∫øn d·ªØ li·ªáu b·ªã h·ªèng
  /// 
  /// ü¶Ü: Refactor to soft delete, closing zero boxes in the process
  Future<void> _deleteBoxes() async {
    logger.log("X√≥a x√≥a x√≥a box", name: "$runtimeType");
    await deleteConversationBoxes();
    await deleteMessageBox();
    if (userInfoBox != null) {
      await userInfoBox!.clear();
    }
  }

  Future<void> deleteConversationBoxes() async {
    if (conversationListBox != null) {
      await conversationListBox!.clear();
    }
    if (locallySavedConversationList != null) {
      await locallySavedConversationList!.clear();
    }
  }

  Future<void> deleteMessageBox() async {
    if (locallySavedMessages != null) {
      await locallySavedMessages!.clear();
    }
  }


  Future<bool> initWithContext() async {
    if (!Hive.isAdapterRegistered(HiveTypeId.myThemeHiveTypeId)) {
      //Hive.registerAdapter(MyThemeAdapter());
      //themeBox = await openBox(HiveBoxNames.themeBox);
      return false;
    }
    return true;
  }

  Future<void> _openBoxes() async {
    try {
      await Future.wait([
        _openLocallySavedConversationList(),
        _openLocallySavedMessagesBox(),
        _openConversationListBox(),
        _openUserInfoBox(),

        // TL 28/12/2023: DEPRECATED. Tr∆∞·ªõc d√πng ·ªü ChatDetailBloc,
        // Gi·ªù ch·ª©c nƒÉng cache tin nh·∫Øn ƒë√£ chuy·ªÉn d·ªãch qua ChatRepo
        //_openchatConversationDetailBoxBox(),

        // TL 28/12/2023:
        // Nh·ªØng box b√™n d∆∞·ªõi n√†y ch∆∞a d√πng ƒë·∫øn (h√¨nh nh∆∞ th·∫ø?)
        // Nh∆∞ng v·∫´n ƒë·ªÉ t·∫°m ·ªü ƒë√¢y ƒë·ªÉ tr√°nh g√£y app
        _opendownloaderBoxBox(),
        _opensettingsStateBoxBox(),
        _openlistDeleteTimeBox(),
        _openlistMemberSearchBox(),
        _openlistKeySearchBox(),
      ]).then((value) {
        logger.log('M·ªü box d·ªØ li·ªáu local th√†nh c√¥ng', name: "$runtimeType");
        _initRepoCaches(value);
      });
    } catch (e, s) {
      logger.logError(e, s, 'M·ªü box d·ªØ li·ªáu th·∫•t b·∫°i');
    }
    // messageSettingModelBox = await openBox(HiveBoxNames.messageSettingModelBox);
    // messageSettingModelItemBox =
    //     await openBox(HiveBoxNames.messageSettingModelItemBox);
  }

  /// TL 17/2/2024:
  ///
  /// @value: Gi√° tr·ªã c·ªßa c√°c closure m·ªü box. Xem _openBoxes() ƒë·ªÉ bi·∫øt r√µ h∆°n
  /// NOTE: Y√™u c·∫ßu init c√°c cache ·ªü trong n√†y, v√¨:
  ///
  /// N·∫øu init cache ·ªü ngay trong constructor, khi kh·ªüi t·∫°o l·∫ßn ƒë·∫ßu s·∫Ω b·ªã exception do
  /// v·∫´n ƒëang await HiveService.init(), nh∆∞ng m·ªôt s·ªë class kh√°c ƒë√£ c·∫ßn d√πng repo r·ªìi,
  /// v·∫≠y n√™n Repo s·∫Ω kh·ªüi t·∫°o cache th·∫•t b·∫°i. V√≠ d·ª•: ChatRepo
  void _initRepoCaches(List<dynamic> values) {
    try {
      ChatRepo().initCache();
      UserInfoRepo().initCache();
      logger.log('Kh·ªüi t·∫°o d·ªØ li·ªáu cache cho c√°c Repo th√†nh c√¥ng.',
          name: "$runtimeType._initRepoCaches");
    } catch (e, s) {
      logger.logError("Kh·ªüi t·∫°o d·ªØ li·ªáu cache cho c√°c Repo th·∫•t b·∫°i: $e", s,
          "$runtimeType._initRepoCaches");
    }
  }

  /// TL 8/1/2024:
  ///
  /// H√†m n√†y ƒë∆∞·ª£c g·ªçi trong MyApp(), khi c√≥ request t·∫Øt app.
  ///
  /// NOTE: Kh√¥ng ƒë·∫£m b·∫£o n√≥ s·∫Ω ƒë∆∞·ª£c g·ªçi, do didRequestAppExit() kh√¥ng ƒë·∫£m b·∫£o ƒë∆∞·ª£c g·ªçi.
  ///
  /// N·∫øu sau n√†y c√≥ t√¨m ra gi·∫£i ph√°p t·ªët h∆°n, th√¨ v·∫´n d√πng c√°i n√†y nh√©
  Future<void> saveData() async {
    try {
      logger.log('L∆∞u d·ªØ li·ªáu c√°c cache Repo.', name: "$runtimeType");
      await Future.wait(
        [
          ChatRepo().saveData(),
        ],
      );
      logger.log('L∆∞u d·ªØ li·ªáu cache Repo th√†nh c√¥ng.', name: "$runtimeType");
    } catch (e, s) {
      logger.log('L∆∞u d·ªØ li·ªáu cache Repo th·∫•t b·∫°i: $e\nStack trace:$s',
          name: "$runtimeType");
    }
  }

  Future _opendownloaderBoxBox() async =>
      downloadBox ??= await openBox(HiveBoxNames.downloaderBox);

  Future _openConversationListBox() async =>
      conversationListBox ??= await openBox(HiveBoxNames.conversationListBox);

  // TL 28/12/2023: DEPRECATED. Tr∆∞·ªõc d√πng ·ªü ChatDetailBloc,
  // nh∆∞ng gi·ªù ch·ª©c nƒÉng cache tin nh·∫Øn ƒë√£ chuy·ªÉn d·ªãch qua ChatRepo
  // Future _openchatConversationDetailBoxBox() async =>
  //     listMessagesBox ??= await openBox(HiveBoxNames.listMessagesBox);

  Future _opensettingsStateBoxBox() async =>
      settingStateBox ??= await openBox(HiveBoxNames.settingsStateBox);

  // m√° kh·ªüi t·∫°o m√† qu√™n cmn d·∫•u =
  Future _openlistDeleteTimeBox() async =>
      listTimeDeleteBox ??= await openBox(HiveBoxNames.listTimeDeleteBox);

  Future _openlistMemberSearchBox() async =>
      listMemberSearchBox ??= await openBox(HiveBoxNames.listMemberSearchBox);

  // TL 28/12/2023: C√≥ ng∆∞·ªùi kh·ªüi t·∫°o nh·∫ßm box do copy paste?
  Box<String>? listKeySearchBox;
  Future _openlistKeySearchBox() async =>
      listKeySearchBox ??= await openBox(HiveBoxNames.listKeySearchBox);

  /// TL 28/12/2023: D√πng cho ChatRepo
  /// Box c√≥ key-value:
  /// ID cu·ªôc tr√≤ chuy·ªán - List<SocketSentMessageModel.toHiveObjectMap()> l∆∞u d∆∞·ªõi d·∫°ng String,
  /// S·ª≠ d·ª•ng SocketSentMessageModel.fromHiveObjectMap() ƒë·ªÉ convert l·∫°i th√†nh tin nh·∫Øn
  Box<String>? locallySavedMessages;
  Future<Box<String>?> _openLocallySavedMessagesBox() async =>
      locallySavedMessages ??=
          await openBox<String>(HiveBoxNames.locallySavedMessagesBox);

  /// TL 8/1/2024: D√πng cho ChatRepo
  ///
  /// Box c√≥ key-value:
  /// ID ng∆∞·ªùi d√πng - List<int> l∆∞u d∆∞·ªõi d·∫°ng JSON,
  Box<String>? locallySavedConversationList;
  Future<Box<String>?> _openLocallySavedConversationList() async =>
      locallySavedConversationList ??=
          await openBox<String>(HiveBoxNames.locallySavedConversationList);

  /// TL 28/12/2023: D√πng cho UserInfoRepo
  ///
  /// Key-value: ID ng∆∞·ªùi d√πng - UserInfo ƒë∆∞·ª£c jsonEncode()
  Box<String>? userInfoBox;
  Future _openUserInfoBox() async =>
      userInfoBox ??= await openBox<String>(HiveBoxNames.userInfoBox);

  Box<String>? listMemberSearchBox;

  // saveEncodedListMessageToChatConversationBox(
  //   int conversationId,
  //   String encodedMsgs,
  // ) =>
  //     listMessagesBox?.put(
  //       conversationId,
  //       encodedMsgs,
  //     );
  // c·∫≠p nh·∫≠t tin nh·∫Øn ·ªü 1 cu·ªôc tr√≤ chuy·ªán ·ªü local
  saveListMessageToChatConversationBox(
    int conversationId,
    List<SocketSentMessageModel> msgs,
  ) async {
    // List<SocketSentMessageModel>? localMess =
    //     await getConversationOfflineMessages(conversationId);
    // var newMsgs = [...?localMess];
    // newMsgs.addAll(msgs);
    // newMsgs.toSet().toList();
    return listMessagesBox?.put(
        conversationId, await compute(_encodeListMessages, msgs));
  }

  //l∆∞u danh s√°ch b·∫°n b√® tr√™n Zalo
  saveFriendZaloList(String zaloId, List<FriendZalo >listFriendZalo) async {
    var box =
        await Hive.openBox(HiveBoxNames.locallySavedFriendZaloList);

    await box.put(zaloId, listFriendZalo);
  }

  Future<List<FriendZalo>> getDataFriendZalo(String zaloId) async {
    var box =
        await Hive.openBox(HiveBoxNames.locallySavedFriendZaloList);

    return box.get(zaloId)! ;

  }

  

  

  //L∆∞u cu·ªôc tr√≤ chuy·ªán zalo
  saveConversationItemZalo(String zaloID, List<ConversationItemZaloModel> listConversationZalo ) async {
    var box = await Hive.openBox(HiveBoxNames.saveConversationZalo);
    box.put(zaloID, listConversationZalo);
  }


  // x√≥a tin nh·∫Øn ·ªü local
  deleteMessageFromChatConversationBox(
      String messageId, int conversationId) async {
    List<SocketSentMessageModel>? msgs =
        await getConversationOfflineMessages(conversationId);
    msgs?.removeWhere((e) => e.messageId == messageId);
    return listMessagesBox?.put(
      conversationId,
      await compute(_encodeListMessages, [...?msgs]),
    );
  }

  // x√≥a cu·ªôc tr√≤ chuy·ªán ·ªü local
  deleteConversationFromChatConversationBox(int conversationId) async {
    return listMessagesBox?.delete(conversationId);
  }

  // nh·∫≠n tin nh·∫Øn ƒë·∫øn

  // ch·ªânh s·ª≠a tin nh·∫Øn ·ªü local
  updateMessageFromChatConversationBox(
      String messageId, int conversationId, String message) async {
    List<SocketSentMessageModel>? msgs =
        await getConversationOfflineMessages(conversationId);
    var newMsgs = [...?msgs];
    var index = newMsgs.indexWhere((element) => element.messageId == messageId);
    if (index >= 0) newMsgs[index].message = message;
    return listMessagesBox?.put(
      conversationId,
      await compute(_encodeListMessages, newMsgs),
    );
  }

  // TL 28/12/2023:
  // TODO: Chuy·ªÉn d·ªãch ch·ª©c nƒÉng n√†y v√†o ChatRepo, l·∫Øng nghe ChatClient stream
  //ƒê·ªïi t√™n cu·ªôc tr√≤ chuy·ªán
  // updateNameConversation(String name, int conversationId) async {
  //   var listConversation = chatItemModelBox?.toMap();
  //   var checkNullList = {...?listConversation};
  //   if (checkNullList[conversationId] != null) {
  //     checkNullList[conversationId]?.conversationBasicInfo.name = name;
  //   }
  //   if (checkNullList[conversationId] != null) {
  //     chatItemModelBox?.put(conversationId, checkNullList[conversationId]!);
  //   }
  // }

  static String _encodeListMessages(List<SocketSentMessageModel> msgs) =>
      json.encode(
        msgs.map((e) => sockeSentMessageModelToHiveObjectJson(e)).toList(),
      );
  // l∆∞u t·∫•t c·∫£ tin nh·∫Øn v√† cu·ªôc tr√≤ chuy·ªán
  // l∆∞u map (id conversation, List<SocketSentMessageModel>) encode sang string
  saveMapConversationIdAndEncodedMessage(Map<int, String> map) {
    return listMessagesBox?.putAll(map);
  }

  // TL 28/12/2023: N·∫øu sau 1 th√°ng app v·∫´n ch·∫°y t·ªët, x√≥a c√°i n√†y ƒëi
  // saveConversationItem(Map<int, ChatItemModel> map) =>
  //     chatItemModelBox?.putAll(map);

  Future<Box<T>> openBox<T>(String name) {
    try {
      return _openBox(name);
    } catch (e) {
      Hive.deleteBoxFromDisk(name);
      return _openBox(name);
    }
  }

  // TL 28/12/2023:
  // TODO: Chuy·ªÉn d·ªãch ch·ª©c nƒÉng n√†y qua ChatRepo, l·∫Øng nghe ChatClient stream
  // updateFavoriteConversationItem(int conversationId, bool favorite) async {
  //   var listConversation = chatItemModelBox?.toMap();
  //   var checkNullList = {...?listConversation};
  //   if (checkNullList[conversationId] != null) {
  //     checkNullList[conversationId]?.isFavorite = favorite;
  //   }
  //   if (checkNullList[conversationId] != null) {
  //     chatItemModelBox?.put(conversationId, checkNullList[conversationId]!);
  //   }
  // }

  saveTimeDeleteBox(
    String messageId,
    DateTime timeDelete,
  ) async {
    return await listTimeDeleteBox?.put(messageId, timeDelete);
  }

  FutureOr<DateTime?> getTimeDeleteBox(String messageId) async {
    var time = await listTimeDeleteBox?.get(messageId);
    return time;
  }

  deleteTimeDelete(String messageId) async =>
      await listTimeDeleteBox?.delete(messageId);

  Future<Box<T>> _openBox<T>(String name) => Hive.openBox<T>(name);

  Box<DownloaderModel>? downloadBox;

  /// TL 2/1/2023:
  ///
  /// Key-Value: ID ng∆∞·ªùi d√πng - Json List<ChatItemModel.toHiveObjectMap()>
  ///
  /// Ti·ªÅn th√¢n l√† chatItemModelBox, ch·ª©a th√¥ng tin c√°c cu·ªôc tr√≤ chuy·ªán, d√πng ·ªü ChatRepo.
  /// Check qua ChatRepo ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt
  Box<String>? conversationListBox;

  @Deprecated(
      "Ch∆∞a r√µ n√≥ l√† g√¨, h√¨nh nh∆∞ l√† l∆∞u chat conversation detail (ChatItemModel chƒÉng?). D√π l√† g√¨ th√¨ hi·ªán t·∫°i ch∆∞a d√πng")
  Box<String>? listMessagesBox;

  //Box<MyTheme>? themeBox;
  Box<SettingState>? settingStateBox;
  Box<DateTime>? listTimeDeleteBox;

  // late final Box<MessageSettingModel> messageSettingModelBox;
  // late final Box<MessageSettingModelItem> messageSettingModelItemBox;

  /// TODO: Kh√¥ng c·∫ßn clear box khi log out n·∫øu m√¨nh bi·∫øt c√°ch l∆∞u th√¥ng tin theo id ng∆∞·ªùi d√πng
  clearBoxToLogout() async {
    try {
      await _deleteBoxes();
    } catch (e) {}
  }

  registerAdapter() {
    Hive
      ..registerAdapter(DownloaderModelAdapter())
      // ..registerAdapter(DownloadStatusAdapter())
      ..registerAdapter(MessageTypeAdapter())
      ..registerAdapter(UserStatusAdapter())
      // ..registerAdapter(UnreadMessageCounterCubitAdapter())
      ..registerAdapter(ChatMemberModelAdapter())
      ..registerAdapter(ConversationBasicInfoAdapter())
      ..registerAdapter(ChatItemModelAdapter())
      ..registerAdapter(UserInfoBlocAdapter())
      ..registerAdapter(FriendStatusAdapter())
      ..registerAdapter(MessageStatusAdapter())
      //..registerAdapter(AppThemeColorAdapter())
      ..registerAdapter(SettingStateAdapter())
      ..registerAdapter(MessageSettingModelAdapter())
      ..registerAdapter(MessageSettingModelItemAdapter())
      ..registerAdapter(MessageSettingTypeAdapter())
      ..registerAdapter(MessageTextSizeAdapter())
      ..registerAdapter(AutoDeleteMessageTimeModelAdapter())
      ..registerAdapter(SocketSentMessageModelAdapter())
      ..registerAdapter(EmojiAdapter())
      ..registerAdapter(EmotionAdapter())
      ..registerAdapter(ApiFileModelAdapter())
      ..registerAdapter(ApiReplyMessageModelAdapter())
      ..registerAdapter(InfoLinkAdapter())
      ..registerAdapter(InfoSeenAdapter())
      //..registerAdapter(ListChatItemModelAdapter())
      ..registerAdapter(UserInfoAdapter());
      // ..registerAdapter(FriendZaloAdapter());
  }

  // l·∫•y danh s√°ch tin nh·∫Øn l∆∞u ·ªü local
  // FutureOr<Map<int, List<SocketSentMessageModel>>?> get messages async {
  //   if (listMessagesBox == null) return null;
  //   final currentInfo = SystemUtils.getCurrrentUserInfoAndUserType();
  //   var data = await compute(
  //     _decodeLocalMessage,
  //     [
  //       Map<int, String>.from(listMessagesBox!.toMap()),
  //       currentInfo,
  //     ],
  //   );
  //   return data;
  // }

  FutureOr<List<SocketSentMessageModel>?> getConversationOfflineMessages(
    int conversationId,
  ) async {
    if (listMessagesBox?.get(conversationId) == null) return null;
    final String encodedMsgs = listMessagesBox!.get(conversationId)!;
    final currentInfo = SystemUtils.getCurrrentUserInfoAndUserType();
    return (await compute(
      _decodeLocalMessage,
      [
        {conversationId: encodedMsgs},
        currentInfo,
      ],
    ))[conversationId];
  }

  static Map<int, List<SocketSentMessageModel>> _decodeLocalMessage(
    List params,
  ) =>
      Map<int, List<SocketSentMessageModel>>.from(
        params[0].map(
          (e, v) => MapEntry(
            e,
            (json.decode(v) as List)
                .map(
                  (e) => sockeSentMessageModelFromHiveObjectJson(
                    e,
                    currentInfo: params[1],
                  ),
                )
                .toList(),
          ),
        ),
      );

  clearBox(String box) => Hive.deleteBoxFromDisk(box);
}
